package com.company;

import java.io.File;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import opennlp.tools.namefind.NameFinderME;
import opennlp.tools.namefind.TokenNameFinderModel;
import opennlp.tools.tokenize.TokenizerModel;
import opennlp.tools.tokenize.TokenizerME;
import opennlp.tools.tokenize.Tokenizer;
import opennlp.tools.util.InvalidFormatException;
import opennlp.tools.util.Span;

import java.io.InputStream;
import java.io.FileInputStream;

public class DateFinder {
    public static String[] getDate(String s) throws
            IOException {


        InputStream modelIn1 = new FileInputStream("/Users/nathanmathew/IdeaProjects/Linghacks/src/input/en-ner-date.bin");
        InputStream modelIn2 = new FileInputStream("/Users/nathanmathew/IdeaProjects/Linghacks/src/input/en-token.bin");
        //try {
            TokenizerModel model1 = new TokenizerModel(modelIn2);
            TokenNameFinderModel model2 = new TokenNameFinderModel(modelIn1);

        //}
        //catch (IOException e) {
            //System.out.println("rohan sucks 2");
          //  e.printStackTrace();
        //}
        //finally {
            if (modelIn1 != null) {
              //  try {
                //    System.out.println("Rohan sucks 3");
                    modelIn1.close();
                //} catch (IOException e) {
                   // System.out.println("rohan sucks 4");
                //}
            }
            if (modelIn2 != null) {
                //try {
                  //  System.out.println("rohan sucks 5");
                    modelIn2.close();
                //} catch (IOException e) {
                  //  System.out.println("rohan sucks 6");
                //}
            }
        //}
        Tokenizer tokenizer = new TokenizerME(model1);
        NameFinderME nameFinder = new NameFinderME(model2);
        String tokens[] = tokenizer.tokenize(s);
        //String tokens[] = tokenizer.tokenize("I have recital on April 3 2001.");
        Span nameSpans[] = nameFinder.find(tokens);
        System.out.println("length is "+nameSpans.length);
        String[] array= Span.spansToStrings(nameSpans,tokens);
        return array;
    }

    public static DateClass dateCreator(String s)
    {
        DateClass rv;
        String temp = s;
        String[] parts = temp.split(" ");

        if (s.equals("tomorrow"))
        {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            LocalDate localDate = LocalDate.now();
            rv = new DateClass(dtf.format(localDate));
            rv.nextDate();
        }

        else if (s.equals("next month"))
        {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            LocalDate localDate = LocalDate.now();
            rv = new DateClass(dtf.format(localDate));
            if (rv.getMonth() == 12)
            {
                rv.setMonth(1);
                rv.setYear(rv.getYear() + 1);
            }
            else
                rv.setMonth(rv.getMonth() + 1);
        }

        else if (s.equals("next week"))
        {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            LocalDate localDate = LocalDate.now();
            rv = new DateClass(dtf.format(localDate));
            for (int i = 0; i < 7; i++)
                rv.nextDate();
        }

        else if (s.equals("next year")) {
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            LocalDate localDate = LocalDate.now();
            rv = new DateClass(dtf.format(localDate));
            rv.setYear(rv.getYear() + 1);
        }

        else if (parts.length == 3)
        {
            rv = new DateClass(getMonthInt(parts[0]), Integer.parseInt(parts[1]), Integer.parseInt(parts[2]));
        }

        else if (parts.length == 2)
        {
            LocalDate localDate = LocalDate.now();
            rv = new DateClass(localDate.getYear(), Integer.parseInt(parts[0]), Integer.parseInt(parts[1]));
        }

        else if(s.substring(0,4).equals("next")) {
            //DateClass d = new DateClass();
            DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy/MM/dd");
            LocalDate localDate = LocalDate.now();
            rv = new DateClass(dtf.format(localDate));
            String day = s.substring(s.indexOf(""));
            ArrayList<String> days = new ArrayList<String>();
            days.add("Sunday");
            days.add("Monday");
            days.add("Tuesday");
            days.add("Wednesday");
            days.add("Thursday");
            days.add("Friday");
            days.add("Saturday");
            if (Integer.parseInt(day) - Integer.parseInt(rv.dayOfWeek()) < 0) {
                for (int i = 0; i < Integer.parseInt(day) + 7 - Integer.parseInt(rv.dayOfWeek()); i++)
                    rv.nextDate();
            }
            if (Integer.parseInt(day) - Integer.parseInt(rv.dayOfWeek()) > 0) {
                for (int i = 0; i < Integer.parseInt(rv.dayOfWeek()) + 7 - Integer.parseInt(day); i++)
                    rv.nextDate();
            }
        }

        else
            rv = null;
        
        return rv;

    }

    private static int getMonthInt(String month)
    {
        String [] m = {"", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};
        int rv = -1;

        for (int i = 0; i < 12; i++)
        {
            if (m[i].equals(month))
                rv = i;

        }
        return rv;
    }
}
